[General]
decimal_places = 6        # Number of decimal places to use in sequence+deltamass output columns

[Logging]
create_log = 1            # Create log file, 0=no 1=yes
create_ini = 0            # Create copy of INI file in input directory, 0=no 1=yes (specifying custom parameters in the command line will always create a copy of INI file)
# Second PeakAssignator executed in SOLVER section
[PeakAssignator]
caldeltamh_column = TrunkDM                  # Name of column containing calibrated Delta MH
theomh_column = New_Theo_mh                   # Name of column containing theoretical MH for ppm error calculation
mod_peptide_column = TrunkSequence           # Name of column containing sequence with deltamass in XXX[DM]XXX or XXXXXX_DM format (case-sensitive)
assign_seq_column = New_Assigned_Sequence    # Name of output column containing sequence with assigned deltamass (case-sensitive)
peak_label = PEAK                            # Label for peaks
orphan_label = ORPHAN                        # Label for orphans
closestpeak_column = New_ClosestPeak         # Output column that will contain the closest peak
peak_column = New_PeakAssignation            # Output column that will contain the peak/orphan labels
deltamass_column = New_Assigned_deltaMass    # Output column that will contain the assigned deltamass
ppm_column = New_ppmError                    # Output column that will contain the ppm error
# begin: variable_param
ppm_max = 10                                 # Maximum ppm difference for peak assignation
# end: variable_param



[ProteinAssigner]
seq_column=TrunkPlainPeptide                      # name of the column containing peptide sequence
mode=fasta                                        # execution mode [fasta,column]
decoy_prefix=DECOY_                               # decoy prefix in fasta
sep_char=;                                        # parameters for column mode
mpp_a=MPP_accession                               # name of the output column with most probable accession
mpp_d=MPP_description                             # name of the output column with most probable description
candidate_a=PA_accession_candidates               # name of the output column containing candidate accessions
candidate_d=PA_description_candidates             # name of the output column containing candidate descriptions
# begin: variable_param
iso_leucine=L                                     # convert L, I and J to the selected letter
regex_previous=/^sp/                              # apply a (regex) filter for protein redundancies before everything else
regex=/^((?!fragment).)*$/^[^|]+\|[^-|]+\|/       # regular expressions to filter in case of ties --> "/regex1/regex2/regex3/.../"
len_seq=0                                         # prioritize shortest/longest sequence: -1 --> Prioritize shortest; 1 --> Prioritize longest; 0 --> Not considered
# end: variable_param

